// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  COLLEGE
  DEPARTMENT
  TEACHER
  ASSISTANT
}

enum CourseType {
  THEORY
  LAB
  TUTORIAL
}

enum PreferenceType {
  TIME_SLOT
  ROOM
  DAY
}

enum PreferenceLevel {
  PREFERRED
  ACCEPTABLE
  NOT_PREFERRED
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Role-specific relationships
  college    College?    @relation("CollegeUser")
  department Department? @relation("DepartmentUser")

  // Teacher/Assistant relationships
  teacherAssignments   CourseAssignment[] @relation("TeacherAssignments")
  assistantAssignments CourseAssignment[] @relation("AssistantAssignments")
  preferences          Preference[]

  @@map("users")
}

model College {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User         @relation("CollegeUser", fields: [userId], references: [id])
  userId      String       @unique @db.ObjectId
  departments Department[]
  buildings   Building[]
  timeSlots   TimeSlot[]

  @@map("colleges")
}

model Department {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  college   College @relation(fields: [collegeId], references: [id])
  collegeId String  @db.ObjectId
  user      User    @relation("DepartmentUser", fields: [userId], references: [id])
  userId    String  @unique @db.ObjectId

  programs Program[]
  courses  Course[]

  @@map("departments")
}

model Program {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String   @unique
  description String?
  duration    Int // in years
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @db.ObjectId
  batches      Batch[]

  @@map("programs")
}

model Batch {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  program   Program   @relation(fields: [programId], references: [id])
  programId String    @db.ObjectId
  sections  Section[]

  @@unique([programId, year])
  @@map("batches")
}

model Section {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  strength  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  batch             Batch              @relation(fields: [batchId], references: [id])
  batchId           String             @db.ObjectId
  groups            Group[]
  courseAssignments CourseAssignment[]

  @@unique([batchId, name])
  @@map("sections")
}

model Group {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  section           Section            @relation(fields: [sectionId], references: [id])
  sectionId         String             @db.ObjectId
  courseAssignments CourseAssignment[]

  @@unique([sectionId, name])
  @@map("groups")
}

model Semester {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseAssignments CourseAssignment[]
  schedules         Schedule[]

  @@map("semesters")
}

model Course {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String     @unique
  credits     Int
  type        CourseType
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  department   Department         @relation(fields: [departmentId], references: [id])
  departmentId String             @db.ObjectId
  assignments  CourseAssignment[]

  @@map("courses")
}

model CourseAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String   @db.ObjectId
  semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId String   @db.ObjectId
  section    Section? @relation(fields: [sectionId], references: [id])
  sectionId  String?  @db.ObjectId
  group      Group?   @relation(fields: [groupId], references: [id])
  groupId    String?  @db.ObjectId

  // Teacher and Assistant assignments
  teacher     User?   @relation("TeacherAssignments", fields: [teacherId], references: [id])
  teacherId   String? @db.ObjectId
  assistant   User?   @relation("AssistantAssignments", fields: [assistantId], references: [id])
  assistantId String? @db.ObjectId

  schedules Schedule[]

  @@map("course_assignments")
}

model Building {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  college   College @relation(fields: [collegeId], references: [id])
  collegeId String  @db.ObjectId
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String   @unique
  capacity    Int
  type        String? // Lab, Classroom, Auditorium, etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  building    Building     @relation(fields: [buildingId], references: [id])
  buildingId  String       @db.ObjectId
  schedules   Schedule[]
  preferences Preference[]

  @@map("rooms")
}

model TimeSlot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  startTime String // Format: "HH:MM"
  endTime   String // Format: "HH:MM"
  dayOfWeek Int // 1-7 (Monday-Sunday)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  college     College      @relation(fields: [collegeId], references: [id])
  collegeId   String       @db.ObjectId
  schedules   Schedule[]
  preferences Preference[]

  @@unique([collegeId, startTime, endTime, dayOfWeek])
  @@map("time_slots")
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseAssignment   CourseAssignment @relation(fields: [courseAssignmentId], references: [id])
  courseAssignmentId String           @db.ObjectId
  timeSlot           TimeSlot         @relation(fields: [timeSlotId], references: [id])
  timeSlotId         String           @db.ObjectId
  room               Room             @relation(fields: [roomId], references: [id])
  roomId             String           @db.ObjectId
  semester           Semester         @relation(fields: [semesterId], references: [id])
  semesterId         String           @db.ObjectId

  @@unique([timeSlotId, roomId, semesterId])
  @@map("schedules")
}

model Preference {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  type        PreferenceType
  level       PreferenceLevel
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  timeSlot   TimeSlot? @relation(fields: [timeSlotId], references: [id])
  timeSlotId String?   @db.ObjectId
  room       Room?     @relation(fields: [roomId], references: [id])
  roomId     String?   @db.ObjectId

  @@map("preferences")
}
